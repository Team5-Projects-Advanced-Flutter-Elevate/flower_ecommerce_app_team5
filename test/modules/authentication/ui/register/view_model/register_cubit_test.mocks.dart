// Mocks generated by Mockito 5.4.5 from annotations
// in flower_ecommerce_app_team5/test/modules/authentication/ui/register/view_model/register_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flower_ecommerce_app_team5/core/apis/api_result/api_result.dart'
    as _i5;
import 'package:flower_ecommerce_app_team5/modules/authentication/data/models/register/register_request.dart'
    as _i7;
import 'package:flower_ecommerce_app_team5/modules/authentication/domain/entities/authentication/authentication_response_entity.dart'
    as _i6;
import 'package:flower_ecommerce_app_team5/modules/authentication/domain/repositories_contracts/register/register_repo.dart'
    as _i2;
import 'package:flower_ecommerce_app_team5/modules/authentication/domain/use_cases/register/register_use_case.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRegisterRepo_0 extends _i1.SmartFake implements _i2.RegisterRepo {
  _FakeRegisterRepo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUseCase extends _i1.Mock implements _i3.RegisterUseCase {
  MockRegisterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RegisterRepo get registerRepo => (super.noSuchMethod(
        Invocation.getter(#registerRepo),
        returnValue: _FakeRegisterRepo_0(
          this,
          Invocation.getter(#registerRepo),
        ),
      ) as _i2.RegisterRepo);

  @override
  set registerRepo(_i2.RegisterRepo? _registerRepo) => super.noSuchMethod(
        Invocation.setter(
          #registerRepo,
          _registerRepo,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i5.ApiResult<_i6.AuthenticationResponseEntity>> execute(
          _i7.RegisterRequest? registerRequest) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [registerRequest],
        ),
        returnValue:
            _i4.Future<_i5.ApiResult<_i6.AuthenticationResponseEntity>>.value(
                _i8.dummyValue<_i5.ApiResult<_i6.AuthenticationResponseEntity>>(
          this,
          Invocation.method(
            #execute,
            [registerRequest],
          ),
        )),
      ) as _i4.Future<_i5.ApiResult<_i6.AuthenticationResponseEntity>>);
}
